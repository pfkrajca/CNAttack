# -*- coding: utf-8 -*-
"""Task 2A InferCNV

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1130euK0kIJ6O-Cro1gfKHNFZsdiy4IZp

# **Perform inferCNV on given data**
"""

!pip install scanpy scipy umap-learn leidenalg scFates

import scFates as scf
import numpy as np
import pandas as pd
import anndata as ad
import matplotlib.pyplot as plt

!pip install infercnvpy

import scanpy as sc
import infercnvpy as cnv

from google.colab import drive
drive.mount('/content/drive')

file_path = '/content/drive/My Drive/Colab Notebooks/Computational Stem Cells/adata_used.h5ad'
adata = ad.read_h5ad(file_path)

import scanpy as sc
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import os
import sys

# Create output directory for results
out_dir = "/content/drive/My Drive/Colab Notebooks/Computational Stem Cells/inferCNV_results"
os.makedirs(out_dir, exist_ok=True)

# Install R on Colab if not already installed
print("Installing R and dependencies...")
!apt-get update -qq
!apt-get install -y --no-install-recommends r-base r-base-dev libcurl4-openssl-dev libxml2-dev libssl-dev jags

# Install rpy2 if not already installed
!pip install rpy2

# Now import rpy2
import rpy2.robjects as ro
from rpy2.robjects import pandas2ri
from rpy2.robjects.packages import importr
from rpy2.robjects.conversion import localconverter

# Load the simulated data
print("Loading data ...")
adata_sim_visual = sc.read_h5ad('/content/drive/My Drive/Colab Notebooks/Computational Stem Cells/adata_used.h5ad')

# Setup R environment
print("Setting up R environment...")
# Initialize R
r = ro.r

# Install and load required R packages
print("Installing necessary R packages (this may take a while)...")
# Install BiocManager
r('if (!require("BiocManager", quietly = TRUE)) install.packages("BiocManager")')
# Install inferCNV
r('BiocManager::install("infercnv", dependencies=TRUE)')
# Load inferCNV
r('library(infercnv)')
print("R packages installed and loaded successfully")

# Prepare data for inferCNV
print("Preparing data for inferCNV...")

import os
import scanpy as sc
import pandas as pd
import numpy as np

# Create output directory (with NO spaces in the path)
out_dir = "/content/drive/My Drive/Colab Notebooks/Computational Stem Cells/inferCNV_out"  # Simple path with no spaces
os.makedirs(out_dir, exist_ok=True)

# Load the data
print("Loading simulated CNV data...")
adata_sim_visual = sc.read_h5ad('/content/drive/My Drive/Colab Notebooks/Computational Stem Cells/adata_used.h5ad')

# Subsample for faster processing
n_cells = 2000
print(f"Subsampling to {n_cells} cells...")
np.random.seed(42)  # For reproducibility
cell_indices = np.random.choice(adata_sim_visual.obs_names, size=n_cells, replace=False)
adata_subset = adata_sim_visual[cell_indices].copy()

# Export count matrix
print("Exporting count matrix...")
if 'counts' in adata_subset.layers:
    counts = pd.DataFrame(
        adata_subset.layers['counts'].toarray()
        if hasattr(adata_subset.layers['counts'], 'toarray')
        else adata_subset.layers['counts'],
        index=adata_subset.obs_names,
        columns=adata_subset.var_names
    )
else:
    counts = pd.DataFrame(
        adata_subset.X.toarray()
        if hasattr(adata_subset.X, 'toarray')
        else adata_subset.X,
        index=adata_subset.obs_names,
        columns=adata_subset.var_names
    )

counts_file = os.path.join(out_dir, "counts.txt")
counts.to_csv(counts_file, sep='\t')

# Export cell annotations
print("Exporting cell annotations...")
annotations = pd.DataFrame(index=adata_subset.obs_names)
annotations['cell_type'] = adata_subset.obs['simulated_cnvs']
annotations_file = os.path.join(out_dir, "annotations.txt")
annotations.to_csv(annotations_file, sep='\t', header=False)

# Export gene positions
print("Exporting gene positions...")
gene_order = adata_subset.var[['chromosome', 'start', 'end']].copy()
gene_order.index.name = 'gene_name'
gene_order.reset_index(inplace=True)
gene_order_file = os.path.join(out_dir, "gene_order.txt")
gene_order.to_csv(gene_order_file, sep='\t', index=False)

# Create R script that references local files directly
r_script = """
library(infercnv)

# Create the inferCNV object
infercnv_obj <- CreateInfercnvObject(
    raw_counts_matrix="counts.txt",
    annotations_file="annotations.txt",
    gene_order_file="gene_order.txt",
    ref_group_names="normal"
)

# Run inferCNV
infercnv_obj <- run(
    infercnv_obj,
    cutoff=0.1,
    out_dir="./",
    cluster_by_groups=TRUE,
    denoise=TRUE,
    HMM=FALSE,
    analysis_mode="samples",
    num_threads=2,
    no_plot=FALSE
)

# Save the inferCNV object
saveRDS(infercnv_obj, file="infercnv_obj.rds")

print("inferCNV analysis completed successfully")
"""

r_script_path = os.path.join(out_dir, "run_infercnv.R")
with open(r_script_path, 'w') as f:
    f.write(r_script)

# Create a proper shell script with quoted paths
shell_script = """#!/bin/bash
cd "{0}"
Rscript run_infercnv.R
""".format(out_dir)

shell_script_path = os.path.join(out_dir, "run.sh")
with open(shell_script_path, 'w') as f:
    f.write(shell_script)

# Make executable
!chmod +x "{shell_script_path}"

# Run the analysis from the current directory
print("Executing inferCNV analysis...")
!cd "{out_dir}" && Rscript run_infercnv.R

# Print summary of results
print("\nCNA Analysis Summary:")
print(f"Data processed: {n_cells} cells")
print(f"Results saved to: {out_dir}")

# Check what files were created
!ls -la "{out_dir}"

print("Analysis complete")

import os
import scanpy as sc
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from matplotlib.colors import LinearSegmentedColormap
import re

# Set output paths
viz_dir = "/content/drive/My Drive/Colab Notebooks/Computational Stem Cells/inferCNV_viz"
os.makedirs(viz_dir, exist_ok=True)

# Load your data
print("Loading the simulated CNV data...")
adata_sim_visual = sc.read_h5ad('/content/drive/My Drive/Colab Notebooks/Computational Stem Cells/adata_used.h5ad')

# Identify normal and CNA cells
is_normal = adata_sim_visual.obs['simulated_cnvs'] == ''
normal_cells = adata_sim_visual.obs_names[is_normal]
cna_cells = adata_sim_visual.obs_names[~is_normal]
print(f"Found {len(normal_cells)} normal cells and {len(cna_cells)} cells with CNAs")

# Extract expression data
print("Processing expression data...")
if 'counts' in adata_sim_visual.layers:
    expr = (
        adata_sim_visual.layers['counts'].toarray()
        if hasattr(adata_sim_visual.layers['counts'], 'toarray')
        else adata_sim_visual.layers['counts']
    )
else:
    expr = (
        adata_sim_visual.X.toarray()
        if hasattr(adata_sim_visual.X, 'toarray')
        else adata_sim_visual.X
    )

# Create DataFrame with cell names as index
expr_df = pd.DataFrame(
    expr,
    index=adata_sim_visual.obs_names,
    columns=adata_sim_visual.var_names
)

# Calculate mean of normal cells
normal_mean = expr_df.loc[normal_cells].mean()

# Calculate log2 fold change (add 1 to avoid log(0))
log_fc = np.log2((expr_df + 1) / (normal_mean + 1))

# Filter for standard chromosomes (1-22, X, Y) only
standard_chroms = []
for chrom in adata_sim_visual.var['chromosome'].unique():
    if pd.notna(chrom):
        chrom_str = str(chrom)
        # Match chromosomes 1-22, X, Y with or without 'chr' prefix
        if re.match(r'^(chr)?([1-9]|1[0-9]|2[0-2]|X|Y)$', chrom_str, re.IGNORECASE):
            standard_chroms.append(chrom)

print(f"Filtered to {len(standard_chroms)} standard chromosomes: {standard_chroms}")

# Create chromosome ordering
def chrom_order(x):
    x = str(x).upper().replace('CHR', '')
    if x.isdigit():
        return int(x)
    elif x == 'X':
        return 23
    elif x == 'Y':
        return 24
    else:
        return 100

# Sort standard chromosomes naturally
chromosomes = sorted(standard_chroms, key=chrom_order)

# Create ordered gene list
ordered_genes = []
chr_boundaries = []
chr_labels = []
current_pos = 0

for chrom in chromosomes:
    # Get genes for this chromosome in position order
    chr_mask = adata_sim_visual.var['chromosome'] == chrom
    if chr_mask.sum() > 0:
        chr_genes = adata_sim_visual.var[chr_mask].sort_values('start').index.tolist()

        # Record chromosome boundary
        chr_boundaries.append(current_pos)
        chr_labels.append((current_pos + len(chr_genes)//2, str(chrom).replace('chr', '')))

        # Add genes to ordered list
        ordered_genes.extend(chr_genes)
        current_pos += len(chr_genes)

# Create visualization 1: Heatmap of CNAs
print("Creating CNA heatmap...")
# Sample cells for visualization
max_cna_cells = min(150, len(cna_cells))
max_normal_cells = min(50, len(normal_cells))

sampled_cna = np.random.choice(cna_cells, max_cna_cells, replace=False)
sampled_normal = np.random.choice(normal_cells, max_normal_cells, replace=False)
cells_to_plot = np.concatenate([sampled_cna, sampled_normal])

# Clip extreme values for visualization
log_fc_capped = log_fc.clip(-1.5, 1.5)

# Create figure
plt.figure(figsize=(20, 12))
heatmap_data = log_fc_capped.loc[cells_to_plot, ordered_genes]

# Create custom colormap (blue=deletions, red=amplifications)
cmap = LinearSegmentedColormap.from_list(
    'custom_diverging',
    ['#1e77b4', '#ffffff', '#d62728'],  # blue, white, red
    N=256
)

# Plot heatmap
im = plt.imshow(heatmap_data, cmap=cmap, aspect='auto', vmin=-1, vmax=1)

# Add chromosome boundaries
for boundary in chr_boundaries[1:]:  # Skip the first boundary at 0
    plt.axvline(x=boundary, color='black', linestyle='-', linewidth=0.5)

# Add chromosome labels
for pos, label in chr_labels:
    plt.text(pos, -5, label, ha='center', fontsize=10, weight='bold')

# Add separation line between CNA and normal cells
plt.axhline(y=max_cna_cells - 0.5, color='black', linestyle='-', linewidth=1)

# Add labels for cell types
plt.text(len(ordered_genes) + 5, max_cna_cells/2, 'Cells with CNAs',
         rotation=270, va='center', fontsize=12)
plt.text(len(ordered_genes) + 5, max_cna_cells + max_normal_cells/2, 'Normal Cells',
         rotation=270, va='center', fontsize=12)

# Add colorbar
cbar = plt.colorbar(im, orientation='vertical', pad=0.01)
cbar.set_label('Log2 Fold Change vs Normal Cells')

# Add title and labels
plt.title('Copy Number Variation Heatmap (Simulated CNVs)', fontsize=16)
plt.xlabel('Genes (ordered by chromosomal position)')
plt.ylabel('Cells')

# Remove x-ticks (too many genes)
plt.xticks([])

# Save figure
heatmap_file = os.path.join(viz_dir, 'cnv_heatmap.png')
plt.savefig(heatmap_file, dpi=300, bbox_inches='tight')
plt.close()

# Create visualization 2: Chromosome-level summary
print("Creating chromosome-level summary...")
chrom_data = pd.DataFrame(index=log_fc.index)

for chrom in chromosomes:
    # Get genes for this chromosome
    chr_genes = adata_sim_visual.var[adata_sim_visual.var['chromosome'] == chrom].index
    if len(chr_genes) > 0:
        # Calculate mean log FC by chromosome
        chrom_data[chrom] = log_fc[chr_genes].mean(axis=1)

# Create the heatmap
plt.figure(figsize=(15, 10))
chrom_data_capped = chrom_data.clip(-0.8, 0.8)
chrom_plot = chrom_data_capped.loc[cells_to_plot]

# Plot heatmap
im = plt.imshow(chrom_plot, cmap=cmap, aspect='auto', vmin=-0.5, vmax=0.5)

# Add a line to separate CNA and normal cells
plt.axhline(y=max_cna_cells - 0.5, color='black', linestyle='-', linewidth=1.0)

# Format chromosome labels - remove 'chr' prefix for cleaner display
chrom_labels = [str(c).replace('chr', '') for c in chrom_data.columns]

# Add colorbar
cbar = plt.colorbar(im)
cbar.set_label('Mean Log2 Fold Change by Chromosome')

# Add labels
plt.title('Chromosome-Level CNV Summary', fontsize=16)
plt.ylabel('Cells')
plt.xlabel('Chromosomes')
plt.xticks(range(len(chrom_labels)), chrom_labels, rotation=90)

# Save the visualization
summary_file = os.path.join(viz_dir, 'chromosome_summary.png')
plt.savefig(summary_file, dpi=300, bbox_inches='tight')
plt.show()

print(f"Visualizations saved to {viz_dir}")